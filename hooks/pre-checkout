#!/usr/bin/env bash

set -euo pipefail

SSM_PARAM="${GH_CONTROL_USER_ENV_GITHUB_CHECKOUT_PLUGIN_SSM_PARAM:-${BUILDKITE_PLUGIN_GITHUB_FETCH_SSM_PARAM:-}}"
GITHUB_APP_ID="${GH_CONTROL_USER_ENV_GITHUB_CHECKOUT_PLUGIN_APP_ID:-${BUILDKITE_PLUGIN_GITHUB_FETCH_APP_ID:-${GITHUB_APP_ID:-}}}"
GITHUB_APP_SECRET="${GH_CONTROL_USER_ENV_GITHUB_CHECKOUT_PLUGIN_APP_SECRET:-${BUILDKITE_PLUGIN_GITHUB_FETCH_APP_SECRET:-${GITHUB_APP_SECRET:-}}}"
OUTFILE=$(mktemp)
trap 'rm ${OUTFILE}' EXIT
# Prints an info line to stdout.
log_info() {
  echo "$(date '+[%Y-%m-%d %H:%M:%S]') INFO: $*"
}

# prints the major version of the aws cli running
print_aws_version() {
    local version
    version=$(aws --version 2>&1)
    [[ "${version}" =~ ^aws-cli\/([0-9])\.[0-9]+.[0-9]+ ]]
    echo "${BASH_REMATCH[1]}"
}

# Transforms something like git@github.com:Canva/bla.git to canva__bla
print_repo_checkout_path() {
  local repo_url="$1"
  local repo_dir
  repo_dir=$(grep -Eo '([a-zA-Z0-9-]+\/[a-zA-Z0-9-]+)' <<< "${repo_url}" \
      | tr '[:upper:]' '[:lower:]' \
      | sed 's/\//__/g'
      )
  echo "${repo_dir}"
}

print_canva_origin_from_lambda() {
  local aws_version
  aws_version=$(print_aws_version)
  if [[ "${aws_version}" == "2" ]]; then
    aws lambda invoke \
        --region us-east-1 \
        --function-name ssm-cache \
        --cli-binary-format raw-in-base64-out \
        --payload "{\"ssm_param\": \"${SSM_PARAM}\"}" \
        "${OUTFILE}" > /dev/null
  else
    aws lambda invoke \
        --region us-east-1 \
        --function-name ssm-cache \
        --payload "{\"ssm_param\": \"${SSM_PARAM}\"}" \
        "${OUTFILE}" > /dev/null
  fi
}

print_canva_origin_from_ssm() {
  aws ssm get-parameter \
      --name "${SSM_PARAM}"\
      --query "Parameter.Value"\
      --output text\
      --region "us-east-1"
}

export_canva_origin_url() {
  local origin_url
  log_info "retrieving SSM param ${SSM_PARAM}"
  if print_canva_origin_from_lambda ; then
    origin_url="$(jq -r '.body | fromjson | .message' < "${OUTFILE}")"
  else
    origin_url="$(print_canva_origin_from_ssm)"
  fi
  repo_dir="$(print_repo_checkout_path "${origin_url}")"
  if [[ -n "${BUILDKITE_PLUGIN_GITHUB_FETCH_S3_URL:-}" ]]; then
    export BUILDKITE_PLUGIN_GITHUB_FETCH_S3_URL="${BUILDKITE_PLUGIN_GITHUB_FETCH_S3_URL}/${repo_dir}"
  fi

  log_info "Setting remote ${origin_url}"
  export BUILDKITE_REPO="${origin_url}"
}

export_buildkite_repo() {
  log_info "starting pre-checkout"
  # Converts repo url from git@github.com:Org/repo to https://github.com/Org/repo
  export CANVA_REPO="https://github.com/${BUILDKITE_REPO#*@github.com:}"
  export BUILDKITE_REPO="https://github.com/${BUILDKITE_REPO#*@github.com:}"
}

main() {
  if [[ -n "${SSM_PARAM:-}" ]]; then
    export_canva_origin_url
  else
    log_info "ssm param not configured skipping"
  fi
  export_buildkite_repo
}

main "$@"
